
参考動画
Node.js Full Course for Beginners | Complete All-in-One Tutorial | 7 Hours
https://www.youtube.com/watch?v=f2EqECiTBL8&ab_channel=DaveGray

#chapter3: node modules

1) nodemonをグローバルに追加
    % npm i nodemon -g

2) package.jsonを作成(-yをつけると全ての質問に対してYesで答えて時間短縮になる)
    % npm init (-y) 

3) dependencies(この場合はdate-fns)を追加
    % npm i date-fns

4) package-lock.jsonはいじらない、dependencies等をいじりたい時はpackage.jsonをいじる

5) node_modulesはデータ量が多いからgitにはstoreしない
    .gitignore ファイルを作成してgit上に保存したくないディレクトリやファイルを記述する

6) nodemonを開発環境に追加(devDependencies)
    % npm i nodemon( --save-dev / -D)

7) package.jsonの中の"scripts"の中を変更することでローカルサーバー起動の設定ができる
    ex) 
    "scripts": {
                    "start": "node index",
                    "dev": "nodemon index"
                },
                ...

8) uuid を追加(uuid generates userId)
    % npm i uuid

9) dependenciesのバージョン
    ex) "nodemon": "^3.1.9"
        1つ目の3はメジャーバージョン
        2つ目の1はマイナーバージョン
        3つ目の9はパッチ
    
    ex) "nodemon": "^3.1.9"
        先頭の"^"はマイナーバージョンとパッチは変更可・違っても動く
        先頭の"~"はパッチのみ
        先頭に何もない時はメジャー、マイナー、パッチが全て一致していないといけない
        "*"のみ記述されている時はメジャー、マイナー、パッチの全てがなんでも良いが、安全じゃない
        基本的にメジャーバージョンは変更しない

10) 特定のバージョンのdependenciesをインストール
    ex) % npm i nodemon@8.3.1

11) package(dependencies)のアップデート確認
    % npm update

12) dependenciesを削除
    % npm uninstall nodemon
    % npm un nodemon
    % npm rm nodemon
    devDependenciesは末尾に-Dをつける

    7)の"scripts"など、他のpackageに関連するdependenciesを削除したときはそっちの変更も忘れない


#chapter6: Intro to Express JS framework

1) expressをインストール
    % npm i express

2) next function
    ex) app.get('/hello(.html)?', (req, res, next) => {
            console.log('attemped tp lead hello.html');
            next(); ←次のアロー関数が実行される↓
        }, (req, res) => {
            res.send('Hello World!');
        })

3) Chaining Route Handlers
    middleWareでよく使うfunction
    ex) const one = (req, res, next) => {
            console.log('one');
            next();
        }

        const two = (req, res, next) => {
            console.log('two');
            next();
        }

        const three = (req, res) => {
            console.log('three');
            res.send('Finished!');
        }

        app.get('/chain(.html)?', [one, two, three]);

        app.get('/*', (req, res) => {
            res.status(404).sendFile(path.join(__dirname, 'views', '404.html'));
        })

        [実行結果]
        web) Finished!
        terminal) one
                  two
                  three


#chapter7: MiddleWare

1) 3 type of MiddleWare
    ・Built-in MiddleWare
    ・Custom MiddleWare 文字通り自分で作る
    ・MiddleWare from 3rd parties

2) app.use
    app.useより下のapp.get, app.post, etc... の全てのRoutesに滝のように適応される

3) public directory
    ex) 
        // server.js
        app.use(express.static(path.join(__dirname, '/public')));

        // public/index.html
        <link rel="stylesheet" href="css/style.css" />
                                      ↑すでにapp.useでpublicディレクトリのパスを
                                      教えているから"../css/style.css"と
                                      書く必要はない

4) req.headers.origin
    where the request is coming from
    what website sent it to us


#chapter8: Routing

1) template for routes

    // routes/abc.js
    const express = require('express');
    const router = express.Router();
    const path = require('path');

    router.get('/', (req, res) => {
        res.render('index');
    })

    module.exports = router;

2) req.body.id と req.params.id の違い
                      // ↓urlから直接idのparameterを取ってくる
     ex) router.route('/:id')
            .get((req, res) => {
                res.json({ "id": req.params.id });
            })


#chapter9: MVC REST API

1) Controller
    router.route の実行内容をcontrollerに記述して、module.exportsで呼び出せる。

    ex) //abcController.js
        const abc = (req, res) => {
            // 実行内容
        };
        module.exports = abc;

        // /routes/abc.js
        const abcController = require('パス');
        router.get(abcController.abc)


#chapter11: JWT Auth

1) JWT: Json Web Tokens
    confirm authentication, allow access to API endpoints, endpoints provide data resources, use Authorization header

    Hazards: XSS(Cross-Site Scraping), CSRF(CS Request Forgery)
    Access Token and Refresh Token
    Access Token = 
            Short time before it expires //5 to 15 mins

            Sent as JSON, Client stores in memory, 
            Do not store in local storage or cookie

            Issued at Authorization,
            Client uses for API Access until expires,
            Verified with MiddleWare
            New token issued at Refresh request
    
    Refresh Token = 
            Long time before it expires //hours, a day or even days

            Sent as httpOnly cookie, Not accessible via JavaScript
            Must have expiry at some point

            Issued at Authorization,
            Client uses to request new Access Token,
            Verified with endpoint & database,
            Must be allowed to expire or logout

2) .env に ACCESS_TOKEN_SECRET と REFRESH_TOKEN_SECRET を追加

    ACCESS_TOKEN_SECRET

    % node
        require('crypto').randomBytes(64).toString('hex')
    
    ターミナルでnodeを実行して、node内でrequire('crypto').random......を実行
    表示される暗号を .env 内で ACCESS_TOKEN_SECRET=に貼り付ける
    同じ動作をもう一度行って表示された暗号を今度は REFRESH_TOKEN_SECRET=に貼り付ける

3) 機能の追加手順
    controller, route, server


#chapter12: User Roles | Authorization

1) The difference between Authorization and Authentication
    Authentication: the process of verifying who someone is
    Authorization: the process of verifying what resources a user has access to

2) User Roles & Permissions
    provide different levels of access, sent in access token payload, verified with middleware


#chapter13 Intro to MongoDB & Mongoose

1) 